import groovy.swing.SwingBuilder
import groovy.xml.Namespace

/*
 * Created by Angel Leon (@gubatron), Alden Torres (aldenml)
 * Copyright (c) 2011-2022, FrostWire(R). All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.chaquo.python'

buildscript {
    repositories {
        google()
        mavenCentral()
        maven { url "https://chaquo.com/maven" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.1'
        classpath 'org.codehaus.groovy:groovy-all:3.0.9'

        classpath 'net.sf.proguard:proguard-gradle:6.2.2'

        classpath 'com.google.gms:google-services:4.3.14'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.9.2'

        classpath 'androidx.annotation:annotation:1.5.0'
        classpath 'com.android.billingclient:billing:4.1.0'

        classpath 'com.chaquo.python:gradle:12.0.1'
    }
}

repositories {
    google()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

def manifestVersionCode() {
    def manifestFile = new File(project.projectDir.absolutePath + '/AndroidManifest.xml')
    def ns = new Namespace("http://schemas.android.com/apk/res/android", "android")
    def xml = new groovy.xml.XmlParser().parse(manifestFile)
    //System.out.println("manifestVersionCode: xml.attributes()[ns.versionCode].toString()=" + xml.attributes()[ns.versionCode].toString())
    return Integer.parseInt(xml.attributes()[ns.versionCode].toString())
}

def manifestVersionName() {
    def manifestFile = file(project.projectDir.absolutePath + '/AndroidManifest.xml')
    def ns = new Namespace("http://schemas.android.com/apk/res/android", "android")
    def xml = new groovy.xml.XmlParser().parse(manifestFile)
    //System.out.println("manifestVersionName: " + xml.attributes()[ns.versionName].toString())
    return xml.attributes()[ns.versionName].toString()
}

def changeApkOutput(variant) {
//    def flavor = 'unknown'
//    if (variant.productFlavors[0].name == "basic") {
//        flavor = 'basic'
//    } else if (variant.productFlavors[0].name == "plus1") {
//        flavor = 'plus'
//    }
    def suffix = project.ext.versionName + '-b' + project.ext.versionCode
    def name = "Dht" + variant.buildType.name + '-' + suffix

    variant.outputs.all { output ->
        outputFileName = name + '.apk'
    }
    variant.getAssembleProvider().configure() {
        it.doLast {
            assemble ->
                copy {
                    from variant.outputs*.outputFile
                    into "${project.buildDir}"
                }
        }
    }
}

project.ext.versionCode = manifestVersionCode()
project.ext.versionName = manifestVersionName()

boolean isAssembleRelease = gradle.startParameter.taskNames.contains("assembleRelease") || gradle.startParameter.taskNames.contains("assemblePlus1Release")

android {

    compileSdkVersion 32

    defaultConfig {
        applicationId 'com.frostwire.d4v'
        versionName project.ext.versionName
        minSdkVersion 24 // Android 7.0 Nougat, they added ifaddr (as an option to netlink)
        targetSdkVersion 32 // Android 12
        multiDexEnabled true

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }

        python {
            pip {
                install "yt_dlp"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            res.srcDirs = ['res', 'apollo/res']
            aidl.srcDirs = ['src', 'apollo/src']
            assets.srcDirs = ['assets']
            java {
                srcDir '../common/src/main/java'
                srcDir 'apollo/src'
                srcDir 'src'
            }
            jniLibs.srcDirs = ['libs']
        }
    }


    signingConfigs {
        release {
            if (isAssembleRelease) {
                storeFile file("../../frostwire-tools/certs/android.keystore/frostwire.keystore")
                def sigRequester = new SignatureRequester()
                sigRequester.ask()
                storePassword sigRequester.keyPassword()
                keyAlias sigRequester.keyAlias()
                keyPassword sigRequester.keyPassword()
            } else {
                storePassword ''
                keyAlias ''
                keyPassword ''
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
            signingConfig signingConfigs.release
            multiDexKeepFile file('multidex-config.txt')
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
            multiDexKeepFile file('multidex-config.txt')
        }
    }

    flavorDimensions "classicApp"

    productFlavors {
        basic {
            versionCode 9060000 + project.ext.versionCode
            resValue "string", "application_label", "FrostWire"
        }
        plus1 {
            versionCode 9070000 + project.ext.versionCode
            resValue "string", "application_label", "FrostWire Plus"
        }
    }
    lint {
        abortOnError false
    }

    applicationVariants.all { variant ->
        changeApkOutput(variant)
    }

    configurations {
        all {
            exclude group: "com.google.android.gms.common", module: "play-services-measurement"
        }
    }
}

dependencies {
    implementation 'com.google.re2j:re2j:1.7'
    implementation 'com.google.code.gson:gson:2.10'
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.2'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.vectordrawable:vectordrawable-animated:1.1.0'
    implementation 'androidx.browser:browser:1.4.0'
    implementation 'androidx.exifinterface:exifinterface:1.3.4'
    implementation 'androidx.preference:preference:1.2.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'

    implementation 'com.android.billingclient:billing:4.1.0'

    // couldn't update to 20.<5|6>.0 -> ERROR: R8: Type com.google.android.gms.common.GooglePlayServicesUtil is defined multiple times
    //implementation 'com.google.android.gms:play-services-ads:20.4.0'
    //implementation 'com.google.android.gms:play-services-ads:21.1.0'

    implementation 'com.squareup.picasso:picasso:3.0.0-SNAPSHOT'
    implementation 'com.google.android.flexbox:flexbox:3.0.0'

    // Firebase Crashlytics
    implementation platform('com.google.firebase:firebase-bom:29.3.0')
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics'

    implementation 'androidx.media2:media2-session:1.2.1'
    implementation 'androidx.media2:media2-widget:1.2.1'
    implementation 'androidx.media2:media2-player:1.2.1'

    // AppLovin Max
    implementation 'com.applovin:applovin-sdk:11.4.2'

    // AppLovin + Unity
    implementation 'com.applovin.mediation:unityads-adapter:4.3.0.0'

    def jlibtorrent_version = '1.2.17.0'
    implementation files('libs/jlibtorrent-' + jlibtorrent_version + '.jar')

    // att free phones use this and crashes
    implementation files('libs/jlibtorrent-android-arm-' + jlibtorrent_version + '.jar')

    // oneplus hd1905 uses this
    implementation files('libs/jlibtorrent-android-arm64-' + jlibtorrent_version + '.jar')

    // used by android emulator on macos
    implementation files('libs/jlibtorrent-android-x86-' + jlibtorrent_version + '.jar')

    implementation files('libs/jlibtorrent-android-x86_64-' + jlibtorrent_version + '.jar')

    //butterknife
    implementation 'com.jakewharton:butterknife:10.0.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0'

    //Retrofit网络请求
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.0.0-beta4'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.4.1'

    //Rxjava
    implementation 'io.reactivex.rxjava2:rxjava:2.1.13'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
}

class DeployRelease extends DefaultTask {

    String flavor = 'unknown'

    def version = project.ext.versionName
    def build = project.ext.versionCode

    static def runCmd(cmd) {
        println(cmd)

        def p = Runtime.getRuntime().exec(cmd)
        def stdOut = new BufferedReader(new InputStreamReader(p.getInputStream()))

        def s
        while ((s = stdOut.readLine()) != null) {
            println(s)
        }
    }

    @TaskAction
    def run() {
        println "Building and installing..."
        println "VERSION: $version"
        println "BUILD: $build"
        println "FLAVOR: $flavor"

        def suffix = version + '-b' + build + '-' + flavor
        def filename = "$project.buildDir/frostwire-android-release-" + suffix + '.apk'

        runCmd("adb uninstall com.frostwire.d4v")
        runCmd("./gradlew clean assembleRelease")
        runCmd("adb install $filename")
    }
}

class SignatureRequester {
    String myKeyAlias = ""
    String myKeyPassword = ""

    void ask() {
        System.setProperty('java.awt.headless', 'false')
        if (System.console() == null) { // this is always the case on macOS at least
            new SwingBuilder().edt {
                dialog(modal: true,
                        title: 'Enter keystore data',
                        alwaysOnTop: true,
                        resizable: true,
                        locationRelativeTo: null,
                        show: true,
                        size: [215, 147]
                ) {
                    vbox {
                        label(text: "Key Alias:")
                        inputAlias = textField()
                        label(text: "Key Password:")
                        inputPassword = passwordField()
                        button(defaultButton: true, text: 'OK', actionPerformed: {
                            this.myKeyAlias = inputAlias.text
                            this.myKeyPassword = new String(inputPassword.password)
                            dispose()
                        })
                    }
                }
            }
        } else {
            this.myKeyAlias = System.console().readPassword("\nKey Alias: ")
            this.myKeyAlias = new String(myKeyAlias)
            this.myKeyPassword = System.console().readPassword("\nKey Password: ")
            this.myKeyPassword = new String(myKeyPassword)
        }
    }

    String keyAlias() {
        this.myKeyAlias
    }

    String keyPassword() {
        this.myKeyPassword
    }
}

task deployBasic(type: DeployRelease) {
    flavor = 'basic'
}

task deployPlus(type: DeployRelease) {
    flavor = 'plus'
}
